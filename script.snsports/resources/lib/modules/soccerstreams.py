import xbmc,xbmcaddon,xbmcgui,xbmcplugin,urllib,urllib2,os,re,sys,hashlibimport datetimeimport httplib2import base64,timefrom HTMLParser import HTMLParserfrom resources.lib.modules import dom_parserfrom resources.lib.modules import plugintoolsfrom resources.lib.modules import log_utilsaddon_id            = 'plugin.video.sportie'AddonTitle          = '[COLOR mediumpurple]SPORTIE[/COLOR]'fanarts             = xbmc.translatePath(os.path.join('special://home/addons/' + addon_id , 'fanart.jpg'))icon                = xbmc.translatePath(os.path.join('special://home/addons/' + addon_id, 'icon.png'))PLEXUS_PATH         = xbmc.translatePath('special://home/addons/program.plexus')dialog              = xbmcgui.Dialog()dp                  = xbmcgui.DialogProgress()def SCRAPE_SOCCERSTREAMS():    dialog = xbmcgui.Dialog()    timezone = SET_SOCCERSTREAMS_TIMEZONE()        if '-' in timezone: display_tz = timezone.replace('-','+')    else: display_tz = '-' + timezone    addLink('[COLOR dodgerblue][B]Current Time-Zone: GMT ' + display_tz + ' - Click To Change[/B][/COLOR]','url',997,icon,fanarts,'')    base = 'https://soccerstreams.net/'    try:        r = open_url(base)    except:         dialog.ok(AddonTitle, "There was an issue connecting to Soccer Streams. We do not support systems running Kodi <= 16.1 on this feature due to TLS issues. This issue is fixed on Kodi > 17.0.")         quit()            base = 'https://soccerstreams.net/'    r = open_url(base)    r = dom_parser.parse_dom(r, 'table', attrs={'id': 'eventsTable'})    number = []    check_num = re.compile('Watch(.+?)</a>').findall(str(r))    for checks in check_num:        if 'count' in checks:            streams = re.compile('<span class="count">(.+?)</span>').findall(checks)[0]            number.append(streams)        else: number.append('0')    r = dom_parser.parse_dom(r, 'tr')    r = [dom_parser.parse_dom(i, 'td', req='class') for i in r]    r = [(dom_parser.parse_dom(i[0].content, 'span', attrs={'class': 'event-time'}, req='data-eventtime'),          dom_parser.parse_dom(i[1].content, 'p', attrs={'class': 'hidden'}),          dom_parser.parse_dom(i[1].content, 'img', req='src'),          dom_parser.parse_dom(i[2].content, 'div', attrs={'class': 'text-right'}),          dom_parser.parse_dom(i[2].content, 'div', attrs={'class': 'text-left'}),          dom_parser.parse_dom(i[2].content, 'a', req='href')) for i in r if i]    r = [(i[0][0].attrs['data-eventtime'], i[1][0].content, i[2][0].attrs['src'], i[3][0].content, i[4][0].content, i[5][0].attrs['href']) for i in r if i[0] and i[1] and i[2] and i[3] and i[4] and i[5]]    r = [(i[0], i[1], i[2], re.sub('<.+?>|</.+?>', '', i[3]), re.sub('<.+?>|</.+?>', '', i[4]), i[5]) for i in r]    if r:        matches = 0        n = 0        addLink('[COLOR yellow][B]Notice: Number of active streams are in yellow.[/B][/COLOR]','null',999,icon,fanarts,'')        for i in r:            count = number[n]            n = n + 1            convert_time = str(i[0])            try:                datetime_object = datetime.datetime.strptime(convert_time, '%Y-%m-%d %H:%M:%S')            except TypeError:                datetime_object = datetime.datetime(*(time.strptime(convert_time, '%Y-%m-%d %H:%M:%S')[0:6]))            datetime_object = datetime_object-datetime.timedelta(hours = int(timezone))            # Fix for Soccer Streams site changing default TZ to -1 behind GMT            datetime_object = datetime_object-datetime.timedelta(hours = int(-1))            datetime_object = str(datetime_object)            try:date,ko = datetime_object.split(' '); date = date.split('-'); date = ('%s-%s-%s' % (date[2],date[1],date[0])); ko=ko.split(':'); ko = ('%s:%s' % (ko[0],ko[1])); event_time = ko + ' - ' + date            except: event_time = 'Unknown'            home = i[3].encode('utf-8').replace('&nbsp;',''); away = i[4].encode('utf-8').replace('&nbsp;','')            name = '[COLOR white][B]' + home.title() + 'vs ' + away.title() + '[/B][/COLOR]'            name = strip_tags(name)            url = i[5].encode('utf-8') + "|SPLIT|" + name               matches = matches + 1            if count == '0': addLink('0 - [COLOR blue][B]' + event_time.encode('utf-8') + '[/B][/COLOR] | ' + name + ' | [COLOR mediumpurple][B]'+ i[1].encode('utf-8') + '[/B][/COLOR]',url,308,i[2].encode('utf-8'),fanarts,'')            else: addLink('[COLOR yellow][B]' + count + '[/COLOR] - [COLOR blue]' + event_time.encode('utf-8') + '[/B][/COLOR] | ' + name + ' | [COLOR mediumpurple][B]'+ i[1].encode('utf-8') + '[/B][/COLOR]',url,308,i[2].encode('utf-8'),fanarts,'')        if matches == 0:            dialog.ok(AddonTitle, 'Sorry, no matches were found. Please try later.')            quit()    else:        dialog.ok(AddonTitle, 'Sorry, we could not get any match information from Soccer Streams. This issue will be fixed soon.')        quit()def SCRAPE_SOCCERSTREAMS_GET_LINKS(name,url,iconimage):    dialog = xbmcgui.Dialog()    dp.create(AddonTitle,'Checking for links.....','Please wait.....','')    url,name = url.split("|SPLIT|")    orig_name = name        streamurl=[]; streamname=[]; streamicon=[]    k = 0; j = 0        r = open_url(url)        if 'These will become visible 1 hour before kick-off time' in r:        dialog.ok(AddonTitle, 'These will become visible 1 hour before kick-off time')        quit()    r = re.compile('<div class="stream_block"(.+?)<i class="fa fa-exclamation-triangle red"',re.DOTALL).findall(r)        namelist = []; idlist = []; urllist=[]; combinedlists=[]; tup=[]    if r:        for i in r:            url = re.compile('data-href=\"(.+?)\"').findall(i)[0]            stype = re.compile('data-type=\"(.+?)\"').findall(i)[0]            squal = re.compile('data-quality=\"(.+?)\"').findall(i)[0]            slang = re.compile('data-language=\"(.+?)\"').findall(i)[0]            try: info = re.compile('data-original-title="(.+?)"',re.DOTALL).findall(i)[0]            except: info = 'Null'            if 'This Stream' in info: info='Null'            name = ''            if "APPROVED STREAMER" in i: st = '[COLOR silver][B]APPROVED STREAM: [/B][/COLOR]'            elif "VERIFIED STREAMER" in i: st = '[COLOR gold][B]VERIFIED STREAM: [/B][/COLOR]'            else: st = ''            if 'acestream' in url:                if os.path.exists(PLEXUS_PATH): name = st + "[COLOR blue]" + squal + " - [COLOR white][B]" + name + "[/COLOR][/B] - [/COLOR][COLOR mediumpurple]" + slang + " - [/COLOR][COLOR orangered]" + stype + "[/COLOR]"                else:                    name = re.sub(r'\[(.+?)\]','', name)                    st = re.sub(r'\[(.+?)\]','', st)                    if (info == 'Null') or (info.startswith('">')): name = st + "[COLOR gray]" + squal + " - " + name + " - " + slang + " - " + stype + " (PLEXUS NOT INSTALLED)[/COLOR]"                    else: name = st + "[COLOR gray]" + squal + " - " + name + " - " + info + " - " + slang + " - " + stype + " (PLEXUS NOT INSTALLED)[/COLOR]"            else:                 if (info == 'Null') or (info.startswith('">')): name = st + "[COLOR blue]" + squal + " - [COLOR white][B]" + name + "[/COLOR][/B] - [/COLOR][COLOR mediumpurple]" + slang + "[/COLOR] - [COLOR blue]" + stype + "[/COLOR]"                else: name = st + "[COLOR blue]" + squal + " - [COLOR white][B]" + name + "[/COLOR][/B] - [/COLOR][COLOR blue]" + info + " [/COLOR]-[COLOR mediumpurple] " + slang + "[/COLOR] - [COLOR blue]" + stype + "[/COLOR]"            if 'VERIFIED STREAM' in name: id=1            elif 'APPROVED STREAM' in name: id=2            elif 'hd ' in name.lower(): id = 3            elif '520p' in name.lower(): id = 4            elif 'sd ' in name.lower(): id = 5            else: id = 6            namelist.append(name)            urllist.append(url)            idlist.append(id)            combinedlists = list(zip(idlist,namelist,urllist))        if combinedlists: tup = sorted(combinedlists, key=lambda x: int(x[0]),reverse=False)    if tup:        for id,name,url in tup:            streamurl.append(url)            streamname.append(name)            k = k + 1    if k == 0:        dialog.ok(AddonTitle, "Sorry, there are no streams available at this time.")        dp.close(); quit()    else:        orig_name ='[COLOR mediumpurple]'+orig_name+'[/COLOR]'        select = dialog.select(orig_name,streamname)        if select < 0:            dp.close(); quit()        else:            url = streamurl[select]            check = streamname[select]            name = urllib.quote_plus(streamname[select])            if 'acestream' in url:                if not os.path.exists(PLEXUS_PATH):                    dialog.ok(AddonTitle, 'Please install Plexus to play Acestream links.')                    quit()            import liveresolver            import urlresolver            dp.update(0)            dp.update(33,'Checking if link is playable via URL Resolver......','','')            if urlresolver.HostedMediaFile(url).valid_url():                 stream_url = urlresolver.HostedMediaFile(url).resolve()                liz = xbmcgui.ListItem(name,iconImage=iconimage, thumbnailImage=iconimage)                liz.setPath(stream_url)                dp.close()                log_utils.log("Playing Live Resolver Link: " + stream_url, log_utils.LOGNOTICE)                xbmc.Player ().play(stream_url, liz, False)                quit()            dp.update(66,'Checking if link is playable via Live Resolver......','','')            if liveresolver.isValid(url)==True:                url=liveresolver.resolve(url)                liz = xbmcgui.ListItem(name,iconImage=iconimage, thumbnailImage=iconimage)                liz.setPath(stream_url)                dp.close()                log_utils.log("Playing URL Resolver Link: " + stream_url, log_utils.LOGNOTICE)                xbmc.Player ().play(stream_url, liz, False)                quit()            dp.update(99,'Attempting to play link......','','')            if "acestream" in url:                 url = 'plugin://program.plexus/?url=' + str(url) + '&mode=1&name=acestream+' + str(name)                liz = xbmcgui.ListItem(name,iconImage=iconimage, thumbnailImage=iconimage)                liz.setPath(url)                dp.close()                xbmc.Player ().play(url, liz, False)                        else:                if '.m3u8' in url:                    log_utils.log("Playing F4M Tester Link: " + url, log_utils.LOGNOTICE)                    url = 'plugin://plugin.video.f4mTester/?streamtype=HLSRETRY&amp;name='+name+'&amp;url='+url+'&amp;iconImage='+iconimage                elif '.ts'in url:                     log_utils.log("Playing F4M Tester Link: " + url, log_utils.LOGNOTICE)                    url = 'plugin://plugin.video.f4mTester/?streamtype=TSDOWNLOADER&amp;name='+name+'&amp;url='+url+'&amp;iconImage='+iconimage                         else:                    log_utils.log("Playing Sports Devil Link: " + url, log_utils.LOGNOTICE)                    sdbase = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26title='+name+'%26url='                    suffix = "/"                    if not check.endswith(suffix):                        refer = check + "/"                    else:                        refer = check                    url = sdbase + url + "%26referer=" + refer                liz = xbmcgui.ListItem(name,iconImage=iconimage, thumbnailImage=iconimage)                liz.setPath(url)                dp.close()                xbmc.Player ().play(url, liz, False)def SET_SOCCERSTREAMS_TIMEZONE():    time_value = plugintools.get_setting("time_zone")        try:        if time_value == '0': timezone = '0'        elif time_value == '1': timezone = '-1'        elif time_value == '2': timezone = '-2'        elif time_value == '3': timezone = '-3'        elif time_value == '4': timezone = '-3.5'        elif time_value == '5': timezone = '-4'        elif time_value == '6': timezone = '-4.5'        elif time_value == '7': timezone = '-5'        elif time_value == '8': timezone = '-5.5'        elif time_value == '9': timezone = '-5.75'        elif time_value == '10': timezone = '-6'        elif time_value == '11': timezone = '-7'        elif time_value == '12': timezone = '-8'        elif time_value == '13': timezone = '-9'        elif time_value == '14': timezone = '-10'        elif time_value == '15': timezone = '-11'        elif time_value == '16': timezone = '-11.3'        elif time_value == '17': timezone = '-11.5'        elif time_value == '18': timezone = '-12'        elif time_value == '19': timezone = '1'        elif time_value == '20': timezone = '2'        elif time_value == '21': timezone = '3'        elif time_value == '22': timezone = '3.5'        elif time_value == '23': timezone = '4'        elif time_value == '24': timezone = '4.5'        elif time_value == '25': timezone = '5'        elif time_value == '26': timezone = '6'        elif time_value == '27': timezone = '7'        elif time_value == '28': timezone = '8'        elif time_value == '29': timezone = '9'        elif time_value == '30': timezone = '9.5'        elif time_value == '31': timezone = '10'        elif time_value == '32': timezone = '11'        elif time_value == '33': timezone = '12'        else: timezone = '0'    except: timezone = '0'        return timezoneclass MLStripper(HTMLParser):    def __init__(self):        self.reset()        self.fed = []    def handle_data(self, d):        self.fed.append(d)    def get_data(self):        return ''.join(self.fed)def strip_tags(html):    s = MLStripper()    s.feed(html)    return s.get_data()def open_url(url):    req = urllib2.Request(url)    req.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')    response = urllib2.urlopen(req, timeout = 10)    link=response.read()    link=link.replace('\n','').replace('\r','')    response.close()    return link    def addDir(name,url,mode,iconimage,fanart,description=''):    if not "http" in iconimage:        iconimage = icon    elif "imgur" in iconimage:        if not ".jpg" in iconimage:            if not ".png" in iconimage:                iconimage = iconimage + ".jpg"    if not "http" in fanart:        fanart = fanarts    if "imgur" in fanart:        if not ".jpg" in fanart:            if not ".png" in fanart:                fanart = fanart + ".jpg"    u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)+"&iconimage="+urllib.quote_plus(iconimage)+"&fanart="+urllib.quote_plus(fanart)    ok=True    liz=xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)    liz.setProperty( "fanart_Image", fanart )    liz.setProperty( "icon_Image", iconimage )    ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=True)    return okdef addLink(name, url, mode, iconimage, fanart, description=''):    if not "http" in iconimage:        iconimage = icon    elif "imgur" in iconimage:        if not ".jpg" in iconimage:            if not ".png" in iconimage:                iconimage = iconimage + ".jpg"    if not "http" in fanart:        fanart = fanarts    if "imgur" in fanart:        if not ".jpg" in fanart:            if not ".png" in fanart:                fanart = fanart + ".jpg"    u=sys.argv[0]+"?url="+urllib.quote_plus(url)+"&mode="+str(mode)+"&name="+urllib.quote_plus(name)+"&iconimage="+urllib.quote_plus(iconimage)+"&fanart="+urllib.quote_plus(fanart)    ok=True    liz=xbmcgui.ListItem(name, iconImage=iconimage, thumbnailImage=iconimage)    liz.setProperty( "fanart_Image", fanart )    liz.setProperty( "icon_Image", iconimage )    ok=xbmcplugin.addDirectoryItem(handle=int(sys.argv[1]),url=u,listitem=liz,isFolder=False)    return ok