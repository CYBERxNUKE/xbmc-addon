import base64;exec base64.b64decode('import base64 , hashlib , os , random , re , requests , shutil , string , sys , urllib , urllib2 , json , urlresolver , ssl , liveresolver , zipfile , urlparse
import xbmc , xbmcaddon , xbmcgui , xbmcplugin , xbmcvfs
if 64 - 64: i11iIiiIii
OO0o = 'script.snstream'
Oo0Ooo = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'icon.png' ) )
O0O0OO0O0O0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'fanart.jpg' ) )
iiiii = 'http://www.apkmirror.com/wp-content/uploads/2016/07/579a975ed024a.png'
ooo0OO = 'https://i0.wp.com/blog.exabytetv.info/wp-content/uploads/2016/09/cropped-icontex.png'
II1 = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36'
O00ooooo00 = requests . session ( )
if 32 - 32: ooOoO + iIiiiI1IiI1I1 * IIiIiII11i * o0oOOo0O0Ooo
def I1ii11iIi11i ( ) :
 I1IiI ( '[B][COLOR yellow]NOTHING TO SEE HERE![/COLOR][/B]' , 'url' , 777 , Oo0Ooo , O0O0OO0O0O0 , '' )
 if 73 - 73: OOooOOo / ii11ii1ii
def I1ii11iIi11i ( ) :
 I1IiI ( '[B][COLOR yellow]ARC[/COLOR][/B]' , 'url' , 6 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]UKNOW[/COLOR][/B]' , 'url' , 19 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]M3U[/COLOR][/B]' , 'url' , 20 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]EXABYTE[/COLOR][/B]' , 'url' , 30 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]MOBDRO[/COLOR][/B]' , 'url' , 40 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]liveonlinetv247[/COLOR][/B]' , 'url' , 50 , Oo0Ooo , O0O0OO0O0O0 , '' )
 if 94 - 94: OoOO + OoOO0ooOOoo0O + o0000oOoOoO0o * o00O0oo
def O0oOO0o0 ( ) :
 I1IiI ( '[COLOR yellow]UK Server[/COLOR]' , 'http://www.exabytetv.info/UK.m3u' , 31 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[COLOR yellow]US Server[/COLOR]' , 'http://www.exabytetv.info/USA.m3u' , 31 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[COLOR yellow]DE Server[/COLOR]' , 'http://www.exabytetv.info/DEU.m3u' , 31 , Oo0Ooo , O0O0OO0O0O0 , '' )
 if 9 - 9: o0o - OOO0o0o
def Ii1iI ( ) :
 I1IiI ( '[B][COLOR yellow]Network TV[/COLOR][/B]' , 'url' , 4 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]24/7 TV[/COLOR][/B]' , 'url' , 3 , Oo0Ooo , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]24/7 Movies[/COLOR][/B]' , 'url' , 5 , Oo0Ooo , O0O0OO0O0O0 , '' )
 if 100 - 100: i11Ii11I1Ii1i . ooO - OOoO / ooo0Oo0 * i1 - OOooo0000ooo
def OOo000 ( ) :
 I1IiI ( '[B][COLOR yellow]Entertainment[/COLOR][/B]' , 'Entertainment' , 41 , iiiii , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]24/7[/COLOR][/B]' , 'CAT=247Shows' , 41 , 'micon' , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]Sports[/COLOR][/B]' , 'Sports' , 41 , iiiii , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]Music[/COLOR][/B]' , 'CAT=Music' , 41 , iiiii , O0O0OO0O0O0 , '' )
 I1IiI ( '[B][COLOR yellow]News[/COLOR][/B]' , 'CAT=News' , 41 , iiiii , O0O0OO0O0O0 , '' )
 if 82 - 82: o000o0o00o0Oo . o0oOOo0O0Ooo % IIiIiII11i . i1 / OOooOOo * OOO0o0o
def I1i1i1ii ( url ) :
 file = xbmc . translatePath ( 'special://home/addons/script.snstream/resources/' )
 if os . path . exists ( file ) :
  file = open ( os . path . join ( file , 'mobdrocat.txt' ) )
  IIIII = file . read ( )
  file . close ( )
  I1 = O0OoOoo00o ( IIIII , url , '------' )
  all = re . compile ( '\n([^:]+):(mpd://[^\n]+)' ) . findall ( I1 )
  for iiiI11 , url in all :
   I1IiI ( '[COLOR yellow]%s[/COLOR]' % iiiI11 , url , 8 , iiiii , O0O0OO0O0O0 , '' )
   if 91 - 91: o00O0oo / OOooOOo . o0o + i11Ii11I1Ii1i
def list ( ) :
 import re
 iI11 = iII111ii ( 'http://ftg.srve.io/addon/live/m3u.txt' ) . replace ( '\n' , '' ) . replace ( '\r' , '' ) . replace ( '\t' , '' )
 i1iIIi1 = re . compile ( 'name="(.+?)".+?rl="(.+?)"' ) . findall ( iI11 )
 for iiiI11 , ii11iIi1I in i1iIIi1 :
  if not 'youtube' in iiiI11 :
   I1IiI ( iiiI11 , ii11iIi1I , 21 , Oo0Ooo , O0O0OO0O0O0 , '' )
   if 6 - 6: o0000oOoOoO0o * ooo0Oo0
def O00O0O0O0 ( url ) :
 import re
 open = iII111ii ( url )
 list = re . compile ( '#EXTINF:.+?\,(.+?)\n(.+?)\n' , re . MULTILINE | re . DOTALL ) . findall ( open )
 for iiiI11 , url in list :
  if not 'youtube' in iiiI11 :
   I1IiI ( iiiI11 , url , 8 , Oo0Ooo , O0O0OO0O0O0 , '' )
def ooO0O ( ) :
 import urllib
 ii11iIi1I = 'https://www.arconaitv.me'
 oo = iII111ii ( ii11iIi1I )
 I1 = O0OoOoo00o ( oo , 'id="cable">' , 'id="donate">' )
 iii11iII = i1I111I ( I1 , "div class='box-content'" , '</a>' )
 for i11I1IIiiIi in iii11iII :
  ii11iIi1I = O0OoOoo00o ( i11I1IIiiIi , "href='" , "'" )
  iiiI11 = O0OoOoo00o ( i11I1IIiiIi , "title='" , "'" ) . replace ( '#038;' , '' )
  if not ii11iIi1I == 'https://www.arconaitv.me/' :
   if not iiiI11 == 'A-E' :
    if not iiiI11 == 'F-J' :
     if not iiiI11 == 'K-O' :
      if not iiiI11 == 'P-T' :
       if not iiiI11 == 'U-Z' :
        I1IiI ( '[B][COLOR white]%s[/COLOR][/B]' % iiiI11 , urllib . quote_plus ( 'https://www.arconaitv.me/' + ii11iIi1I ) , 10 , Oo0Ooo , O0O0OO0O0O0 , '' )
        if 34 - 34: IIiIiII11i + iIiiiI1IiI1I1 + i11iIiiIii - o0o + i11iIiiIii
def ooOoo0O ( url ) :
 url = 'http://www.arconaitv.me'
 oo = iII111ii ( url )
 I1 = O0OoOoo00o ( oo , 'id="shows">' , 'id="movies">' )
 iii11iII = i1I111I ( I1 , "div class='box-content stream-info'" , '</a>' )
 for i11I1IIiiIi in iii11iII :
  url = O0OoOoo00o ( i11I1IIiiIi , "href='" , "'" )
  iiiI11 = O0OoOoo00o ( i11I1IIiiIi , "title='" , "'" ) . replace ( '#038;' , '' )
  I1IiI ( iiiI11 , urllib . quote_plus ( 'http://www.arconaitv.me/' + url ) , 2 , Oo0Ooo , O0O0OO0O0O0 , '' )
  if 76 - 76: ooOoO / o00O0oo . ii11ii1ii * OOoO - i11Ii11I1Ii1i
def Oooo ( url ) :
 url = 'http://www.arconaitv.me'
 oo = iII111ii ( url )
 I1 = O0OoOoo00o ( oo , 'id="cable">' , 'id="donate">' )
 iii11iII = i1I111I ( I1 , "div class='box-content'" , '</a>' )
 for i11I1IIiiIi in iii11iII :
  url = O0OoOoo00o ( i11I1IIiiIi , "href='" , "'" )
  iiiI11 = O0OoOoo00o ( i11I1IIiiIi , "title='" , "'" ) . replace ( '#038;' , '' )
  O00o = O0OoOoo00o ( i11I1IIiiIi , "src='" , "'" )
  I1IiI ( iiiI11 , urllib . quote_plus ( 'http://www.arconaitv.me/' + url ) , 2 , O00o , O0O0OO0O0O0 , '' )
  if 61 - 61: ooo0Oo0 . iIiiiI1IiI1I1 * ii11ii1ii . o000o0o00o0Oo % OoOO
def oOo00Oo00O ( url ) :
 url = 'http://www.arconaitv.me'
 oo = iII111ii ( url )
 I1 = O0OoOoo00o ( oo , 'id="movies">' , 'id="donate">' )
 iii11iII = i1I111I ( I1 , "div class='box-content'" , '</a>' )
 for i11I1IIiiIi in iii11iII :
  url = O0OoOoo00o ( i11I1IIiiIi , "href='" , "'" )
  iiiI11 = O0OoOoo00o ( i11I1IIiiIi , "title='" , "'" ) . replace ( '#038;' , '' )
  I1IiI ( iiiI11 , urllib . quote_plus ( 'http://www.arconaitv.me/' + url ) , 2 , Oo0Ooo , O0O0OO0O0O0 , '' )
  if 43 - 43: ii11ii1ii - ooo0Oo0 * iIiiiI1IiI1I1
def O0O00o0OOO0 ( url , name ) :
 Ii1iIIIi1ii = url
 open = iII111ii ( url )
 O00O0O0O0 = re . compile ( 'source src="(.*?)"' , re . DOTALL ) . findall ( open ) [ 0 ]
 O00O0O0O0 = ( O00O0O0O0 ) . replace ( '\/' , '/' )
 o0oo0o0O00OO = xbmcgui . ListItem ( name , iconImage = 'DefaultVideo.png' , thumbnailImage = Oo0Ooo )
 o0oo0o0O00OO . setInfo ( type = 'Video' , infoLabels = { 'Title' : name , 'Plot' : o0oO } )
 o0oo0o0O00OO . setProperty ( 'IsPlayable' , 'true' )
 o0oo0o0O00OO . setPath ( O00O0O0O0 + '|User-Agent=Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&Referer=' + Ii1iIIIi1ii )
 xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , o0oo0o0O00OO )
 if 48 - 48: ooO + ooO / OOooOOo / iIiiiI1IiI1I1
 if 20 - 20: o00O0oo
 if 77 - 77: o0000oOoOoO0o / ooO
 if 98 - 98: iIiiiI1IiI1I1 / o0oOOo0O0Ooo / i11iIiiIii / o00O0oo
def I1i1I1II ( url ) :
 url = 'http://www.m3uliste.pw/'
 oo = iII111ii ( url )
 I1 = O0OoOoo00o ( oo , 'class="zs-tabs"' , '</div' )
 iii11iII = i1I111I ( I1 , 'class="zs-tabs-accordion-content"' , 'class="zs-accordion"' )
 for i11I1IIiiIi in iii11iII :
  url = O0OoOoo00o ( i11I1IIiiIi , "http://'" , "'" )
  iiiI11 = O0OoOoo00o ( i11I1IIiiIi , "http://'" , "'" ) . replace ( '""' , '' )
  I1IiI ( iiiI11 , url , 2 , Oo0Ooo , O0O0OO0O0O0 , '' )
  if 45 - 45: OOooo0000ooo . o0000oOoOoO0o
  if 83 - 83: OOO0o0o . iIiiiI1IiI1I1 . o0o
def O0OoOoo00o ( text , from_string , to_string , excluding = True ) :
 if excluding :
  try : I1I = re . search ( "(?i)" + from_string + "([\S\s]+?)" + to_string , text ) . group ( 1 )
  except : I1I = ''
 else :
  try : I1I = re . search ( "(?i)(" + from_string + "[\S\s]+?" + to_string + ")" , text ) . group ( 1 )
  except : I1I = ''
 return I1I
 if 80 - 80: o0000oOoOoO0o - OoOO0ooOOoo0O
def i1I111I ( text , start_with , end_with ) :
 I1I = re . findall ( "(?i)(" + start_with + "[\S\s]+?" + end_with + ")" , text )
 return I1I
 if 87 - 87: OOO0o0o / ooO - o0oOOo0O0Ooo * i11Ii11I1Ii1i / IIiIiII11i . ooOoO
def iii11I111 ( ) :
 OOOO00ooo0Ooo = [ ]
 OOOooOooo00O0 = sys . argv [ 2 ]
 if len ( OOOooOooo00O0 ) >= 2 :
  Oo0OO = sys . argv [ 2 ]
  oOOoOo00o = Oo0OO . replace ( '?' , '' )
  if ( Oo0OO [ len ( Oo0OO ) - 1 ] == '/' ) :
   Oo0OO = Oo0OO [ 0 : len ( Oo0OO ) - 2 ]
  o0OOoo0OO0OOO = oOOoOo00o . split ( '&' )
  OOOO00ooo0Ooo = { }
  for iI1iI1I1i1I in range ( len ( o0OOoo0OO0OOO ) ) :
   iIi11Ii1 = { }
   iIi11Ii1 = o0OOoo0OO0OOO [ iI1iI1I1i1I ] . split ( '=' )
   if ( len ( iIi11Ii1 ) ) == 2 :
    OOOO00ooo0Ooo [ iIi11Ii1 [ 0 ] ] = iIi11Ii1 [ 1 ]
 return OOOO00ooo0Ooo
 if 50 - 50: OOooOOo - o000o0o00o0Oo * o0o / OOooo0000ooo + o00O0oo
def I1IiI ( name , url , mode , iconimage , fanart , description ) :
 O0O0O = sys . argv [ 0 ] + "?url=" + url + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage ) + "&description=" + urllib . quote_plus ( description )
 oO0Oo = True
 o0oo0o0O00OO = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 o0oo0o0O00OO . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description } )
 o0oo0o0O00OO . setProperty ( 'fanart_image' , fanart )
 if mode == 2 :
  o0oo0o0O00OO . setProperty ( "IsPlayable" , "true" )
  oO0Oo = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = O0O0O , listitem = o0oo0o0O00OO , isFolder = False )
 elif mode == 32 :
  oO0Oo = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = O0O0O , listitem = o0oo0o0O00OO , isFolder = False )
 else :
  oO0Oo = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = O0O0O , listitem = o0oo0o0O00OO , isFolder = True )
 return oO0Oo
 xbmcplugin . endOfDirectory
 if 54 - 54: o00O0oo - ii11ii1ii + IIiIiII11i
def iII111ii ( url ) :
 O0o0 = { }
 O0o0 [ 'User-Agent' ] = II1
 iI11 = O00ooooo00 . get ( url , headers = O0o0 , verify = False ) . text
 iI11 = iI11 . encode ( 'ascii' , 'ignore' )
 return iI11
 if 71 - 71: i11Ii11I1Ii1i + o000o0o00o0Oo % i11iIiiIii + o0o - i1
def oO0OOoO0 ( url ) :
 I111Ii111 = urllib2 . Request ( url )
 I111Ii111 . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
 i111IiI1I = urllib2 . urlopen ( I111Ii111 )
 iI11 = i111IiI1I . read ( )
 i111IiI1I . close ( )
 return iI11
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 70 - 70: OOoO . OoOO / o00O0oo . OOoO - ooOoO / i1
def ooOooo000oOO ( url ) :
 open = Oo0oOOo ( url )
 all = re . compile ( '#EXTINF:.+?\,(.+?)\n(.+?)\n' , re . MULTILINE | re . DOTALL ) . findall ( open )
 for iiiI11 , url in all :
  I1IiI ( iiiI11 , url , 32 , Oo0Ooo , O0O0OO0O0O0 , '' )
  if 58 - 58: OOooOOo * i11Ii11I1Ii1i * o0o / i11Ii11I1Ii1i
def Oo0oOOo ( url ) :
 I111Ii111 = urllib2 . Request ( url , headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36' } )
 i111IiI1I = urllib2 . urlopen ( I111Ii111 )
 oO0o0OOOO = i111IiI1I . read ( )
 i111IiI1I . close ( )
 return oO0o0OOOO
 if 68 - 68: ooo0Oo0 - OOooo0000ooo - ii11ii1ii - o0o + ooO
def iiiI1I11i1 ( url , name , pdialogue = None ) :
 from resources . modules import resolvers
 import xbmcgui
 if 49 - 49: ii11ii1ii % o000o0o00o0Oo . o000o0o00o0Oo . ooO * o000o0o00o0Oo
 url = url . strip ( )
 if 97 - 97: OOoO + o00O0oo . i11Ii11I1Ii1i + o0o % ooo0Oo0
 url = resolvers . resolve ( url )
 if 95 - 95: o0oOOo0O0Ooo
 o0oo0o0O00OO = xbmcgui . ListItem ( name , iconImage = I1ii11iI , thumbnailImage = I1ii11iI )
 o0oo0o0O00OO . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
 o0oo0o0O00OO . setProperty ( "IsPlayable" , "true" )
 o0oo0o0O00OO . setPath ( url )
 if 14 - 14: o0000oOoOoO0o / i1 . o0000oOoOoO0o . ooO % OoOO0ooOOoo0O * ooO
 if url . endswith ( '.ts' ) :
  url = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( url ) + '&amp;streamtype=SIMPLE'
 elif url . endswith ( '.m3u8' ) :
  url = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( url ) + '&amp;streamtype=HLS'
 elif url . endswith ( '.f4m' ) :
  url = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( url )
  if 16 - 16: o0000oOoOoO0o . o000o0o00o0Oo + i11iIiiIii
 if url . lower ( ) . startswith ( 'plugin' ) and 'youtube' not in url . lower ( ) :
  from resources . modules import CustomPlayer
  xbmc . executebuiltin ( 'XBMC.PlayMedia(' + url + ')' )
  i1i1I1IIii1II = CustomPlayer . MyXBMCPlayer ( )
  if ( xbmc . Player ( ) . isPlaying ( ) == 0 ) :
   quit ( )
  try :
   if 65 - 65: OOoO . iIiiiI1IiI1I1 / ooOoO - OOoO
   if i1i1I1IIii1II . urlplayed :
    print 'yes played'
    return
    if time . time ( ) - iii1i1iiiiIi > 4 : return False
    #xbmc.sleep(1000)
  except : pass
  if 2 - 2: ii11ii1ii / ooOoO / o00O0oo % o0000oOoOoO0o % OOoO
  print 'returning now'
  return False
  if 52 - 52: o00O0oo
 from resources . modules import CustomPlayer
 import time
 if 95 - 95: OOoO
 i1i1I1IIii1II = CustomPlayer . MyXBMCPlayer ( )
 i1i1I1IIii1II . pdialogue = pdialogue
 O0oOO0O = time . time ( )
 if 91 - 91: ooOoO
 print 'going to play'
 import time
 iii1i1iiiiIi = time . time ( )
 i1i1I1IIii1II . play ( url , o0oo0o0O00OO )
 if ( xbmc . Player ( ) . isPlaying ( ) == 0 ) :
  quit ( )
 try :
  while i1i1I1IIii1II . is_active :
   xbmc . sleep ( 400 )
   if 61 - 61: OOooOOo
   if i1i1I1IIii1II . urlplayed :
    print 'yes played'
    return
   if time . time ( ) - iii1i1iiiiIi > 4 : return False
   if 64 - 64: o000o0o00o0Oo / o0000oOoOoO0o - ooOoO - ooO
 except : pass
 print 'not played' , url
 xbmc . Player ( ) . stop ( )
 return
 if 86 - 86: ooO % o0000oOoOoO0o / ii11ii1ii / o0000oOoOoO0o
def iIIi1i1 ( url , name , pdialogue = None ) :
 if 10 - 10: ooO
 o0oo0o0O00OO = xbmcgui . ListItem ( name , iconImage = I1ii11iI , thumbnailImage = I1ii11iI )
 o0oo0o0O00OO . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
 o0oo0o0O00OO . setProperty ( "IsPlayable" , "true" )
 o0oo0o0O00OO . setPath ( url )
 if 82 - 82: o0o - iIiiiI1IiI1I1 / i11Ii11I1Ii1i + OOoO
 if url . lower ( ) . startswith ( 'plugin' ) and 'youtube' not in url . lower ( ) :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  for iI1iI1I1i1I in range ( 8 ) :
   xbmc . sleep ( 500 )
   try :
    if 87 - 87: OOO0o0o * o0o + i11Ii11I1Ii1i / iIiiiI1IiI1I1 / ooo0Oo0
    if xbmc . getCondVisibility ( "Player.HasMedia" ) and xbmc . Player ( ) . isPlaying ( ) :
     return True
   except : pass
  print 'returning now'
  return False
 import CustomPlayer , time
 if 37 - 37: ooo0Oo0 - o000o0o00o0Oo * OOO0o0o % i11iIiiIii - OOooo0000ooo
 i1i1I1IIii1II = CustomPlayer . MyXBMCPlayer ( )
 i1i1I1IIii1II . pdialogue = pdialogue
 O0oOO0O = time . time ( )
 if 83 - 83: ooO / ii11ii1ii
 print 'going to play'
 import time
 iii1i1iiiiIi = time . time ( )
 i1i1I1IIii1II . play ( url , o0oo0o0O00OO )
 if ( xbmc . Player ( ) . isPlaying ( ) == 0 ) :
  quit ( )
 try :
  while i1i1I1IIii1II . is_active :
   xbmc . sleep ( 400 )
   if 34 - 34: i1
   if i1i1I1IIii1II . urlplayed :
    print 'yes played'
    return
   if time . time ( ) - iii1i1iiiiIi > 4 : return False
   if 57 - 57: OOO0o0o . ooO . o0oOOo0O0Ooo
 except : pass
 print 'not played' , url
 xbmc . Player ( ) . stop ( )
 return
 if 42 - 42: ooO + o0o % ooOoO
def i1iIIIi1i ( url , name ) :
 if not any ( i in url for i in [ '.f4m' , '.ts' , '.m3u8' ] ) : raise Exception ( )
 iI1iIIiiii = url . split ( '?' ) [ 0 ] . split ( '&' ) [ 0 ] . split ( '|' ) [ 0 ] . rsplit ( '.' ) [ - 1 ] . replace ( '/' , '' ) . lower ( )
 if not iI1iIIiiii : iI1iIIiiii = url
 if not iI1iIIiiii in [ 'f4m' , 'ts' , 'm3u8' ] : raise Exception ( )
 if 26 - 26: ooO . IIiIiII11i
 Oo0OO = urlparse . parse_qs ( url )
 if 39 - 39: ooo0Oo0 - ooOoO % i11iIiiIii * OOooo0000ooo . i1
 try : OOooo0O00o = Oo0OO [ 'proxy' ] [ 0 ]
 except : OOooo0O00o = None
 if 85 - 85: o00O0oo - OoOO
 try : iiIiI = json . loads ( Oo0OO [ 'proxy_for_chunks' ] [ 0 ] )
 except : iiIiI = True
 if 91 - 91: ooo0Oo0 % o0oOOo0O0Ooo % iIiiiI1IiI1I1
 try : IIi1I11I1II = int ( Oo0OO [ 'maxbitrate' ] [ 0 ] )
 except : IIi1I11I1II = 0
 if 63 - 63: IIiIiII11i - OoOO0ooOOoo0O . OOooOOo / o00O0oo . o0000oOoOoO0o / ooOoO
 try : o0OOOO00O0Oo = json . loads ( Oo0OO [ 'simpledownloader' ] [ 0 ] )
 except : o0OOOO00O0Oo = False
 if 48 - 48: ooOoO
 try : I1IiiI = Oo0OO [ 'auth' ] [ 0 ]
 except : I1IiiI = ''
 if 44 - 44: OoOO . OoOO0ooOOoo0O / o0o + OOoO
 if 65 - 65: ooOoO
 try :
  oO00OOoO00 = Oo0OO [ 'streamtype' ] [ 0 ]
 except :
  if iI1iIIiiii == 'ts' : oO00OOoO00 = 'TSDOWNLOADER'
  elif iI1iIIiiii == 'm3u8' : oO00OOoO00 = 'HLS'
  else : oO00OOoO00 = 'HDS'
  if 40 - 40: ii11ii1ii * OOoO + i11Ii11I1Ii1i % ooo0Oo0
 try : OOOOOoo0 = Oo0OO [ 'swf' ] [ 0 ]
 except : OOOOOoo0 = None
 if 49 - 49: ooOoO . ooo0Oo0
 from F4mProxy import f4mProxyHelper
 f4mProxyHelper ( ) . playF4mLink ( url , name , OOooo0O00o , iiIiI , IIi1I11I1II , o0OOOO00O0Oo , I1IiiI , oO00OOoO00 , False , OOOOOoo0 )
 if 11 - 11: i1 * ii11ii1ii . iIiiiI1IiI1I1 % IIiIiII11i + ooo0Oo0
 if 78 - 78: OoOO0ooOOoo0O . i11Ii11I1Ii1i + OoOO0ooOOoo0O / ooO / OoOO0ooOOoo0O
Oo0OO = iii11I111 ( )
ii11iIi1I = None
iiiI11 = None
oO0O00OoOO0 = None
I1ii11iI = None
o0oO = None
OoO = None
type = None
if 88 - 88: ooo0Oo0 . OOooOOo * OOooOOo % OOooo0000ooo
try :
 ii11iIi1I = urllib . unquote_plus ( Oo0OO [ "url" ] )
except :
 pass
try :
 iiiI11 = urllib . unquote_plus ( Oo0OO [ "name" ] )
except :
 pass
try :
 I1ii11iI = urllib . unquote_plus ( Oo0OO [ "iconimage" ] )
except :
 pass
try :
 oO0O00OoOO0 = int ( Oo0OO [ "mode" ] )
except :
 pass
try :
 o0oO = urllib . unquote_plus ( Oo0OO [ "description" ] )
except :
 pass
try :
 OoO = urllib . unquote_plus ( Oo0OO [ "query" ] )
except :
 pass
try :
 type = urllib . unquote_plus ( Oo0OO [ "type" ] )
except :
 pass
 if 15 - 15: o0oOOo0O0Ooo * ii11ii1ii + i11iIiiIii
 if 6 - 6: o000o0o00o0Oo / i11iIiiIii + ooo0Oo0 * OOO0o0o
if oO0O00OoOO0 == None or ii11iIi1I == None or len ( ii11iIi1I ) < 1 :
 I1ii11iIi11i ( )
 if 80 - 80: OOooOOo
elif oO0O00OoOO0 == 2 : O0O00o0OOO0 ( ii11iIi1I , iiiI11 )
elif oO0O00OoOO0 == 3 : ooOoo0O ( ii11iIi1I )
elif oO0O00OoOO0 == 4 : Oooo ( ii11iIi1I )
elif oO0O00OoOO0 == 5 : oOo00Oo00O ( ii11iIi1I )
elif oO0O00OoOO0 == 6 : Ii1iI ( )
elif oO0O00OoOO0 == 7 : ArconRandom
elif oO0O00OoOO0 == 8 : iiiI1I11i1 ( ii11iIi1I , iiiI11 )
if 83 - 83: ooO . i11iIiiIii + OOooOOo . o00O0oo * ooO
elif oO0O00OoOO0 == 20 : list ( )
elif oO0O00OoOO0 == 21 : O00O0O0O0 ( ii11iIi1I )
if 53 - 53: OOooOOo
elif oO0O00OoOO0 == 30 : O0oOO0o0 ( )
elif oO0O00OoOO0 == 31 : ooOooo000oOO ( ii11iIi1I )
elif oO0O00OoOO0 == 32 :
 ii11iIi1I = str ( ii11iIi1I ) . replace ( '\t' , '' ) . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( ' ' , '%20' )
 try :
  i1iIIIi1i ( ii11iIi1I , iiiI11 )
 except :
  pass
  if 31 - 31: OoOO0ooOOoo0O
elif oO0O00OoOO0 == 40 : OOo000 ( )
elif oO0O00OoOO0 == 41 : I1i1i1ii ( ii11iIi1I )
elif oO0O00OoOO0 == 50 : I1i1I1II ( ii11iIi1I )
if 80 - 80: OOooo0000ooo . i11iIiiIii - o00O0oo
if 25 - 25: OoOO0ooOOoo0O
if 62 - 62: i11Ii11I1Ii1i + ooOoO
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) ) # dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')